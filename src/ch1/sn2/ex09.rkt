#lang sicp

(#%require rackunit)

;;; Exercise 1.9, page 36

;; Each of the following two procedures defines a method for adding two
;; positive integers in terms of the procedures inc, which increments
;; its argument by 1, and dec, which decrements its argument by 1.

(define (rec+ a b)
  (if (zero? a)
      b
      (inc (rec+ (dec a) b))))

(define (iter+ a b)
  (if (zero? a)
      b
      (iter+ (dec a) (inc b))))

(define (inc a) ; NOTE: already defined in SICP Scheme
  (+ a 1))

(define (dec a) ; these are typically called add1 and sub1 in Racket
  (- a 1))

;; Using the substitution model, illustrate the process generated by each
;; procedure in evaluating (+ 4 5). Are these procedures iterative or
;; recursive?

;; the first procedure is linear recursive. It takes n space and 2n time to
;; complete

(check-equal? (rec+ 4 5)
              9)

;(rec+ 4 5)
;(inc (rec+ (dec 4) 5))
;(inc (rec+ 3 5))
;(inc (inc (rec+ (dec 3) 5)))
;(inc (inc (rec+ 2 5)))
;(inc (inc (inc (rec+ (dec 2) 5))))
;(inc (inc (inc (rec+ 1 5))))
;(inc (inc (inc (inc (rec+ (dec 1) 5)))))
;(inc (inc (inc (inc (rec+ 0 5)))))
;(inc (inc (inc (inc 5))))
;(inc (inc (inc 6)))
;(inc (inc 7))
;(inc 8)
;9

;; the second procedure is linear iterative. It takes 1 space and n time
;; to complete

(check-equal? (iter+ 4 5)
              9)

;(iter+ 4 5)
;(iter+ (dec 4) (inc 5))
;(iter+ 3 6)
;(iter+ (dec 3) (inc 6))
;(iter+ 2 7)
;(iter+ (dec 2) (inc 7))
;(iter+ 1 8)
;(iter+ (dec 1) (inc 8))
;(iter+ 0 9)
;9

